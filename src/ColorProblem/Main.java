

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ColorProblem;

//************************************************
//  Grant Hatcher     COSC-600     May 9, 2016
//  
//  Assignment:  Project 6 -- REV 2.0
//  Due:  May. 10, 2016
//  File:  *******
//  
//  Goal:   Four Color Problem completed using Depth-First and Breadth-First
//          Traversals of our input graph.
//  
//  Method: Reads in from file an ordered list of numbered States and their neighbors, and builds a Graph (Adjacency List)
//          BFS(index) and DFS(index) take index values as the starting position, and traverse by Bradth-First and 
//          Depth-First methods, setting the color integer for each node.
//          Prints the lists (setting colors to numbers) and states in the MAIN
//
//  ADDED:  Originally programmed in Dr.Java IDE, updated to NetBeans to add UI
//          Displays the Map in full, with the 4 colors filled in as the program runs.
//          Added 5 second delay between Search methods.
//          Left in output for posterity.
//          Fixed paths to work in JAR.  
//
//************************************************

import java.awt.FlowLayout;
import java.awt.image.BufferedImage;
import java.util.*;
import java.io.*;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JPanel;
import javax.swing.OverlayLayout;


/**
 *
 * @author grant_000
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Project_6_Frame
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        p = new javax.swing.JPanel();
        Alabama = new javax.swing.JLabel();
        Arizona = new javax.swing.JLabel();
        Arkansas = new javax.swing.JLabel();
        California = new javax.swing.JLabel();
        Colorado = new javax.swing.JLabel();
        Connecticut = new javax.swing.JLabel();
        Delaware = new javax.swing.JLabel();
        Florida = new javax.swing.JLabel();
        Georgia = new javax.swing.JLabel();
        Idaho = new javax.swing.JLabel();
        Illinois = new javax.swing.JLabel();
        Indiana = new javax.swing.JLabel();
        Iowa = new javax.swing.JLabel();
        Kansas = new javax.swing.JLabel();
        Kentucky = new javax.swing.JLabel();
        Louisiana = new javax.swing.JLabel();
        Maine = new javax.swing.JLabel();
        Maryland = new javax.swing.JLabel();
        Massachusetts = new javax.swing.JLabel();
        Michigan = new javax.swing.JLabel();
        Minnesota = new javax.swing.JLabel();
        Mississippi = new javax.swing.JLabel();
        Missouri = new javax.swing.JLabel();
        Montana = new javax.swing.JLabel();
        Nebraska = new javax.swing.JLabel();
        Nevada = new javax.swing.JLabel();
        NewHampshire = new javax.swing.JLabel();
        NewJersey = new javax.swing.JLabel();
        NewMexico = new javax.swing.JLabel();
        NewYork = new javax.swing.JLabel();
        NorthCarolina = new javax.swing.JLabel();
        NorthDakota = new javax.swing.JLabel();
        Ohio = new javax.swing.JLabel();
        Oklahoma = new javax.swing.JLabel();
        Oregon = new javax.swing.JLabel();
        Pennsylvania = new javax.swing.JLabel();
        RhodeIsland = new javax.swing.JLabel();
        SouthCarolina = new javax.swing.JLabel();
        SouthDakota = new javax.swing.JLabel();
        Tennessee = new javax.swing.JLabel();
        Texas = new javax.swing.JLabel();
        Utah = new javax.swing.JLabel();
        Vermont = new javax.swing.JLabel();
        Virginia = new javax.swing.JLabel();
        Washington = new javax.swing.JLabel();
        WestVirginia = new javax.swing.JLabel();
        Wisconsin = new javax.swing.JLabel();
        Wyoming = new javax.swing.JLabel();

        p.setOpaque(false);

        javax.swing.GroupLayout pLayout = new javax.swing.GroupLayout(p);
        p.setLayout(pLayout);
        pLayout.setHorizontalGroup(
            pLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        pLayout.setVerticalGroup(
            pLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setIconImages(null);
        setModalExclusionType(null);
        setName("USframe"); // NOI18N
        getContentPane().setLayout(new javax.swing.OverlayLayout(getContentPane()));

        Alabama.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/Alabama/Alabama.png"))); // NOI18N
        getContentPane().add(Alabama);
        Alabama.getAccessibleContext().setAccessibleName("Alabama");

        Arizona.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/Arizona/Arizona.png"))); // NOI18N
        getContentPane().add(Arizona);

        Arkansas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/Arkansas/Arkansas.png"))); // NOI18N
        getContentPane().add(Arkansas);

        California.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/California/California.png"))); // NOI18N
        getContentPane().add(California);

        Colorado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/Colorado/Colorado.png"))); // NOI18N
        getContentPane().add(Colorado);

        Connecticut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/Connecticut/Connecticut.png"))); // NOI18N
        getContentPane().add(Connecticut);

        Delaware.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/Delaware/Delaware.png"))); // NOI18N
        getContentPane().add(Delaware);

        Florida.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/Florida/Florida.png"))); // NOI18N
        getContentPane().add(Florida);

        Georgia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/Georgia/Georgia.png"))); // NOI18N
        getContentPane().add(Georgia);

        Idaho.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/Idaho/Idaho.png"))); // NOI18N
        getContentPane().add(Idaho);

        Illinois.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/Illinois/Illinois.png"))); // NOI18N
        getContentPane().add(Illinois);

        Indiana.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/Indiana/Indiana.png"))); // NOI18N
        getContentPane().add(Indiana);

        Iowa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/Iowa/Iowa.png"))); // NOI18N
        getContentPane().add(Iowa);

        Kansas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/Kansas/Kansas.png"))); // NOI18N
        getContentPane().add(Kansas);

        Kentucky.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/Kentucky/Kentucky.png"))); // NOI18N
        getContentPane().add(Kentucky);

        Louisiana.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/Louisiana/Louisiana.png"))); // NOI18N
        getContentPane().add(Louisiana);

        Maine.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/Maine/Maine.png"))); // NOI18N
        getContentPane().add(Maine);

        Maryland.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/Maryland/Maryland.png"))); // NOI18N
        getContentPane().add(Maryland);

        Massachusetts.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/Massachusetts/Massachusetts.png"))); // NOI18N
        getContentPane().add(Massachusetts);

        Michigan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/Michigan/Michigan.png"))); // NOI18N
        getContentPane().add(Michigan);

        Minnesota.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/Minnesota/Minnesota.png"))); // NOI18N
        getContentPane().add(Minnesota);

        Mississippi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/Mississippi/Mississippi.png"))); // NOI18N
        getContentPane().add(Mississippi);

        Missouri.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/Missouri/Missouri.png"))); // NOI18N
        getContentPane().add(Missouri);

        Montana.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/Montana/Montana.png"))); // NOI18N
        getContentPane().add(Montana);

        Nebraska.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/Nebraska/Nebraska.png"))); // NOI18N
        getContentPane().add(Nebraska);

        Nevada.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/Nevada/Nevada.png"))); // NOI18N
        getContentPane().add(Nevada);

        NewHampshire.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/NewHampshire/NewHampshire.png"))); // NOI18N
        getContentPane().add(NewHampshire);

        NewJersey.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/NewJersey/NewJersey.png"))); // NOI18N
        getContentPane().add(NewJersey);

        NewMexico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/NewMexico/NewMexico.png"))); // NOI18N
        getContentPane().add(NewMexico);

        NewYork.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/NewYork/NewYork.png"))); // NOI18N
        getContentPane().add(NewYork);

        NorthCarolina.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/NorthCarolina/NorthCarolina.png"))); // NOI18N
        getContentPane().add(NorthCarolina);

        NorthDakota.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/NorthDakota/NorthDakota.png"))); // NOI18N
        getContentPane().add(NorthDakota);

        Ohio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/Ohio/Ohio.png"))); // NOI18N
        getContentPane().add(Ohio);

        Oklahoma.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/Oklahoma/Oklahoma.png"))); // NOI18N
        getContentPane().add(Oklahoma);

        Oregon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/Oregon/Oregon.png"))); // NOI18N
        getContentPane().add(Oregon);

        Pennsylvania.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/Pennsylvania/Pennsylvania.png"))); // NOI18N
        getContentPane().add(Pennsylvania);

        RhodeIsland.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/RhodeIsland/RhodeIsland.png"))); // NOI18N
        getContentPane().add(RhodeIsland);

        SouthCarolina.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/SouthCarolina/SouthCarolina.png"))); // NOI18N
        getContentPane().add(SouthCarolina);

        SouthDakota.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/SouthDakota/SouthDakota.png"))); // NOI18N
        getContentPane().add(SouthDakota);

        Tennessee.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/Tennessee/Tennessee.png"))); // NOI18N
        getContentPane().add(Tennessee);

        Texas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/Texas/Texas.png"))); // NOI18N
        getContentPane().add(Texas);

        Utah.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/Utah/Utah.png"))); // NOI18N
        getContentPane().add(Utah);

        Vermont.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/Vermont/Vermont.png"))); // NOI18N
        getContentPane().add(Vermont);

        Virginia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/Virginia/Virginia.png"))); // NOI18N
        getContentPane().add(Virginia);

        Washington.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/Washington/Washington.png"))); // NOI18N
        getContentPane().add(Washington);

        WestVirginia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/WestVirginia/WestVirginia.png"))); // NOI18N
        getContentPane().add(WestVirginia);

        Wisconsin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/Wisconsin/Wisconsin.png"))); // NOI18N
        getContentPane().add(Wisconsin);

        Wyoming.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorProblem/Wyoming/Wyoming.png"))); // NOI18N
        getContentPane().add(Wyoming);

        getAccessibleContext().setAccessibleName("MainFrame");
        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    /**
  * PtrNode - Pointer Node Class
  * Creates pointer nodes for Graph (Adjacency List)
  * 
  * @Author:  Grant Hatcher (whatch2@students.towson.edu)
  * @Version:  1.0
  **/
  public static class PtrNode {
    Integer data = null;
    PtrNode next = null;
    
    PtrNode () {
      
    }
    
    PtrNode (Integer dat) {
      data = dat;
    }
    
    PtrNode (PtrNode nex ) {
      next = nex;
    }
    
    PtrNode (Integer dat, PtrNode nex ) {
      data = dat;
      next = nex;
    }
    
  }
  
  
    /**
  * Queue
  * 
  * @Author:  Grant Hatcher (whatch2@students.towson.edu)
  * @Version:  1.0
  **/
  public static class Queue {
    
    public static PtrNode head = new PtrNode();
    public static PtrNode tail = new PtrNode();
    
    public static void EnQ (Integer dat) {
      
      PtrNode newNode = new PtrNode(dat);
      
      if (head.next == null) {
        head.next = newNode;
        
        tail.next = head.next;
        
      } else { 
        tail.next.next = newNode;
        
        tail = tail.next;
      }
      
    }
    
    public static Integer DeQ () {
      
      if (head.next == null) {
        tail = null;
        
        return null;
      } else {
        int out = head.next.data;
        
        head = head.next;
        
        return out;
      }
    }
    
    public static Integer Peek () {
      if ( head.next == null ) {
        return null;
      } else { 
        return head.next.data;
      }
    }
    
  }
  
  
    /**
  * PtrNode - Ponter Node Class
  * Creates pointer nodes for Graph (Adjacency List)
  * 
  * @Author:  Grant Hatcher (whatch2@students.towson.edu)
  * @Version:  1.0
  **/
  public static class Graph {
    //Final array of color values
    public static Integer[] finalColorArray = new Integer[0];
    
    //Array of State names read in, Index corresponds to Color in Final Color array
    public static String[] stateNames = new String[0];
    
    //Array of colors (4) per State index, tracks color values used 
    // (Second Index: 0=Red, 1=Yellow, 2=Blue, 3=Green)
    // Value: 0=Not Used, 1=Used
    //If all 1's, return First Index as Error and return to first occurence of that index value (State)
    public static Integer[][] colorTestArray = new Integer[0][4];
    
    //Integer value of Error causing State (where all colors used and can't assign new)
    public static Integer error = 0;
    
    //Graph of states (indexes)
    public static Vector<PtrNode> stateGraph = new Vector<PtrNode>(0);
    
    public static int[] visit = new int[0];
    
    
    /**
    * BuildGraph - Builds graph from file input
    * 
    * INPUT LINE FORMAT :  Integer:String:Integer, Integer, Integer...
    *                   :  Index:State:Neighbor, Neighbor, Neighbor...
    * 
    * Converts input into Adjacency List stored into "stateGraph"
    * 
    * @Param: File Location string
    **/
    public static void BuildGraph(String fileLoc) {
      //Reads file from destination string
      
      try {
      
      ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
      
      //Jar TEST CODE -----   System.out.println(classLoader.getResourceAsStream(fileLoc));
      
      InputStream stream = classLoader.getResourceAsStream(fileLoc);
          
      Scanner inReader = new Scanner(stream);
      
      while(inReader.hasNextLine()) {
      
        //Gets next line
        String line = inReader.nextLine();
        
//Jar TEST CODE ---   System.out.println(line);
        
        //Set small index to 0
        int ind = 0;
        
        //Creates new Temp string from line
        String[] sections = new String[3];
        
        //Splits line into parts and puts into String array
        for ( String part : line.split(":") ) { 
          sections[ind] = part;
          
          ind++;
        }
        
        //State Index is first String value in Temp array
        int index = Integer.parseInt(sections[0]);
        
        //Duplicates State Names array to dynamically expand
        String[] tempStateNames = stateNames;
        
        //Dynamically expands State Names array
        stateNames = new String[ stateNames.length + 1 ];
        
        //System.out.println(index);
        
        //Replaces State Names into expanded array
        for (int x = 0; x < tempStateNames.length; x++) {
          stateNames[x] = tempStateNames[x];
          
          //WHY IS THIS NECESSARY???
          System.out.println("");
        }
        
        //System.out.println("A: " + stateNames[index]);
        
        //Adds next line value to State Name array
        stateNames[index] = sections[1];
        
        //Create HEAD node
        PtrNode head = new PtrNode(index);
        //Create node to find HEAD
        PtrNode find = new PtrNode(head);
        
        //Add HEAD to State Graph Vector
        stateGraph.addElement(head);
        
        //Add pointers to HEAD in vector 
        for ( String adjacent : sections[2].split(", ") ) {
          PtrNode newNode = new PtrNode(Integer.parseInt(adjacent));
          
          find.next.next = newNode;
          find.next = find.next.next;
        }
        
      
      }
      
      //Set all to null
      finalColorArray = new Integer[stateNames.length];
      
      for (int z = 0; z < finalColorArray.length; z++) {
        finalColorArray[z] = null;
        
      }
    
    
      //Set all to null
      colorTestArray = new Integer[stateNames.length][4];
      
      for (int z =0; z < finalColorArray.length; z++) {
        colorTestArray[z][0] = null;
        colorTestArray[z][1] = null;
        colorTestArray[z][2] = null;
        colorTestArray[z][3] = null;
      }
    
        
      // ---- TEST CODE -----
//      for (int y = 0; y < stateNames.length; y++) {
//        PtrNode newPtrNode = (PtrNode)stateGraph.elementAt(y);
//        
//        System.out.print( stateNames[y] + ": " + newPtrNode.data + ": ");
//        
//        while (newPtrNode.next != null) {
//          System.out.print(" " + newPtrNode.next.data);
//          newPtrNode.next = newPtrNode.next.next;
//        }
//        
//        System.out.println(" ");
//      }
      
      
    } catch (Exception e) {
      System.out.println(e);
    }
  }
        
    
    /**
    * Depth First Search - Sets the color for each node and moves on to its immediate neighbors, recursively backtracking
    * when all available neighbors have been visited and when neighboring colors are the same.
    * 
    * @Param: Integer Index value
    **/
    public static int DFS (int index) throws IOException {
      
      PtrNode head = new PtrNode((PtrNode)stateGraph.elementAt(index));
               
      
      //JPanel p = new JPanel();
      JLabel[] newLabel = {
          Maine, 
          NewHampshire, 
          Vermont, 
          Massachusetts, 
          RhodeIsland, 
          Connecticut, 
          NewYork, 
          NewJersey, 
          Pennsylvania, 
          Delaware, 
          Maryland, 
          WestVirginia, 
          Virginia, 
          NorthCarolina, 
          SouthCarolina, 
          Georgia, 
          Florida, 
          Alabama, 
          Mississippi, 
          Tennessee, 
          Kentucky, 
          Ohio, 
          Indiana, 
          Michigan, 
          Wisconsin, 
          Illinois, 
          Minnesota, 
          Iowa, 
          Missouri, 
          Arkansas, 
          Louisiana, 
          Texas, 
          Oklahoma, 
          Kansas, 
          Nebraska, 
          SouthDakota, 
          NorthDakota, 
          Montana, 
          Wyoming, 
          Colorado, 
          NewMexico, 
          Arizona, 
          Utah, 
          Idaho, 
          Washington, 
          Oregon, 
          Nevada, 
          California };
      
      
            
      error = 1;
      
      while (error != 0) {
        //set check at start
        int check = 0;
        
        //set error at start
        error = 1;
        
        PtrNode find = head.next;
        
        //If null, set to 0 (Red)
        //If 0->1, 1->2, 2->3, 3->0
        if (finalColorArray[index] == null) {
          finalColorArray[index] = 0;
          
          colorTestArray[index][0] = 1;
          
          ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
          java.net.URL imgUrl = classLoader.getResource("ColorProblem/" + stateNames[index] + "/" + stateNames[index] + "R.png");
        
          //System.out.println(imgUrl);
        
          ImageIcon imgIcon = new ImageIcon(imgUrl);
                              
          newLabel[index].setIcon(imgIcon);
          
          
          
        } else if (finalColorArray[index] == 0) {
          finalColorArray[index] = 1;
          
          colorTestArray[index][1] = 1;
          
          ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
          java.net.URL imgUrl = classLoader.getResource("ColorProblem/" + stateNames[index] + "/" + stateNames[index] + "Y.png");
        
          //System.out.println(imgUrl);
        
          ImageIcon imgIcon = new ImageIcon(imgUrl);
                              
          newLabel[index].setIcon(imgIcon);
          
        } else if (finalColorArray[index] == 1) {
          finalColorArray[index] = 2;
          
          colorTestArray[index][2] = 1;
          
          ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
          java.net.URL imgUrl = classLoader.getResource("ColorProblem/" + stateNames[index] + "/" + stateNames[index] + "G.png");
        
          //System.out.println(imgUrl);
        
          ImageIcon imgIcon = new ImageIcon(imgUrl);
                              
          newLabel[index].setIcon(imgIcon);
          
        } else if (finalColorArray[index] == 2) {
          finalColorArray[index] = 3;
          
          colorTestArray[index][3] = 1;
          
          ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
          java.net.URL imgUrl = classLoader.getResource("ColorProblem/" + stateNames[index] + "/" + stateNames[index] + "B.png");
        
          //System.out.println(imgUrl);
        
          ImageIcon imgIcon = new ImageIcon(imgUrl);
                              
          newLabel[index].setIcon(imgIcon);
          
        }else if (finalColorArray[index] == 3) {
          finalColorArray[index] = 0;
          
          colorTestArray[index][0] = 1;
          
          ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
          java.net.URL imgUrl = classLoader.getResource("ColorProblem/" + stateNames[index] + "/" + stateNames[index] + "R.png");
        
          //System.out.println(imgUrl);
        
          ImageIcon imgIcon = new ImageIcon(imgUrl);
                              
          newLabel[index].setIcon(imgIcon);
          
        }
        
        //Test code
        System.out.println(index + " " + stateNames[index] + " " + finalColorArray[index] );
        
        //Checks for neighbor colors, if the same, this index must change color first
        while (find.next != null) {
          if (finalColorArray[index] == finalColorArray[find.next.data]) {
            check++;
            
          }
          
          find = find.next;
          
        }
        
        //If all colors are used and fails check, returns to previous (recursive) and sets values for this index to null.
        if (colorTestArray[index][0] != null && colorTestArray[index][1] != null && colorTestArray[index][2] != null && colorTestArray[index][3] != null && colorTestArray[index][0] == 1 && colorTestArray[index][1] == 1 && colorTestArray[index][2] == 1 && colorTestArray[index][3] == 1 && check != 0 ) {
          
          finalColorArray[index] = null;
          
          colorTestArray[index][0] = null;
          colorTestArray[index][1] = null;
          colorTestArray[index][2] = null;
          colorTestArray[index][3] = null;
          
          ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
          java.net.URL imgUrl = classLoader.getResource("ColorProblem/" + stateNames[index] + "/" + stateNames[index] + ".png");
          ImageIcon imgIcon = new ImageIcon(imgUrl);
                              
          newLabel[index].setIcon(imgIcon);
          
          //Test code
          System.out.println("Back");
          
          return 1;
        }
        
        //Reset find
        find = head.next;
        
        //If check passes, then test next pointer
        if (check == 0) {
          
          
          while(find.next != null) {
          
            //Recursive call to all NULL values
            if (finalColorArray[find.next.data] == null && !(error > 1)) { 
              error = DFS(find.next.data);
              
              if (error == 1) {
                error++;
              }
            } 
            //If any errors occur, exits 
            else if (error > 1) { 
            
            } 
            
            //If no errors occur, returns to prior with "0"
            else { error = 0; }
          
          find = find.next;
          }
        }
        
      }
      
      return 0;
    }
    
    
    /**
    * Breadth First Search - Sets the color for each node and its immediate neighbors, and queues each neighbor not visited.
    * 
    * @Param: Integer Index value
    **/
    public static Integer BFS (Integer index) {
      
      PtrNode head = new PtrNode((PtrNode)stateGraph.elementAt(index));
      
      //Que for running recursive BFS()
      Queue que = new Queue();
      
      //Uses error to save index, and add Erroneous indexes back to Que
      error = 1;
      
      //JPanel p = new JPanel();
      JLabel[] newLabel = {
          Maine, 
          NewHampshire, 
          Vermont, 
          Massachusetts, 
          RhodeIsland, 
          Connecticut, 
          NewYork, 
          NewJersey, 
          Pennsylvania, 
          Delaware, 
          Maryland, 
          WestVirginia, 
          Virginia, 
          NorthCarolina, 
          SouthCarolina, 
          Georgia, 
          Florida, 
          Alabama, 
          Mississippi, 
          Tennessee, 
          Kentucky, 
          Ohio, 
          Indiana, 
          Michigan, 
          Wisconsin, 
          Illinois, 
          Minnesota, 
          Iowa, 
          Missouri, 
          Arkansas, 
          Louisiana, 
          Texas, 
          Oklahoma, 
          Kansas, 
          Nebraska, 
          SouthDakota, 
          NorthDakota, 
          Montana, 
          Wyoming, 
          Colorado, 
          NewMexico, 
          Arizona, 
          Utah, 
          Idaho, 
          Washington, 
          Oregon, 
          Nevada, 
          California };
      
      
      while (error != 0) {
        
        
        //Create Find pointer
        PtrNode find = head.next;
        
        //Print queued node list
        System.out.format("%1$-5s %2$-15s %3$-14s", index, stateNames[index], "Not Visited:");
        
        //System.out.print(index + " " + stateNames[index] + "   Not Visited: ");
        
        
        //Add un-visited items to queue
        if(que.Peek() != null ) {
          
          while (find.next != null) {
            
            if (visit[find.next.data] == 0) {
              
              que.EnQ(find.next.data);
              
              visit[find.next.data] = 1;
              
              //Print queued nodes
              System.out.print(find.next.data + " ");
            }
            
            find = find.next;
          }
          
        } else {  
          
          while (find.next != null) {
            
            if (visit[find.next.data] == 0) {
              que.EnQ(find.next.data);
              
              visit[find.next.data] = 1;
              
              //Print queued nodes
              System.out.print(find.next.data + " ");
              
            }
            
            find = find.next;
            
          }
          
        }
        
        //Reset find Pointer
        find = head.next;
        
        //For initial case, set to visited
        if (visit[index] == 0) {
          visit[index] = 1;
        }
        
        //For all null cases, set to 0
        if ( finalColorArray[index] == null) {
          
          finalColorArray[index] = 0;
          
          colorTestArray[index][0] = 1;
          
          ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
          java.net.URL imgUrl = classLoader.getResource("ColorProblem/" + stateNames[index] + "/" + stateNames[index] + "R.png");
          ImageIcon imgIcon = new ImageIcon(imgUrl);
                              
          newLabel[index].setIcon(imgIcon);
          
        }
        
        //Initialize counter to track neighbor color values
        int[] counter = {0, 0, 0, 0 };
        
        
        //Find all neighbor color values and set counter array
        while (find.next != null ) {
            
            if ( finalColorArray[find.next.data] != null && finalColorArray[find.next.data] == 0) {
              counter[0] = 1;
              
            } else if ( finalColorArray[find.next.data] != null && finalColorArray[find.next.data] == 1) {
              counter[1] = 1;
              
              
            } else if ( finalColorArray[find.next.data] != null && finalColorArray[find.next.data] == 2) {
              counter[2] = 1;
              
              
            } else if ( finalColorArray[find.next.data] != null && finalColorArray[find.next.data] == 3) {
              counter[3] = 1;
              
            }
            
            find = find.next;
            
          }
        
        // ---- TEST CODE -------
        //System.out.println(counter[0] + " " + counter[1] + " " + counter[2] + " " + counter[3]);
        
        
        //Set current index color value
        if( counter[0] != 1) {
          
          finalColorArray[index] = 0;
          
          colorTestArray[index][0] = 1;
          
          ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
          java.net.URL imgUrl = classLoader.getResource("ColorProblem/" + stateNames[index] + "/" + stateNames[index] + "R.png");
          ImageIcon imgIcon = new ImageIcon(imgUrl);
                              
          newLabel[index].setIcon(imgIcon);
          
        } else if ( counter[1] != 1) {
          
          finalColorArray[index] = 1;
          
          colorTestArray[index][1] = 1;
          
          ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
          java.net.URL imgUrl = classLoader.getResource("ColorProblem/" + stateNames[index] + "/" + stateNames[index] + "Y.png");
          ImageIcon imgIcon = new ImageIcon(imgUrl);
                              
          newLabel[index].setIcon(imgIcon);
          
        } else if ( counter[2] != 1) {
          
          finalColorArray[index] = 2;
          
          colorTestArray[index][2] = 1;
          
          ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
          java.net.URL imgUrl = classLoader.getResource("ColorProblem/" + stateNames[index] + "/" + stateNames[index] + "G.png");
          ImageIcon imgIcon = new ImageIcon(imgUrl);
                              
          newLabel[index].setIcon(imgIcon);
          
        } else if ( counter[3] != 1) {
          
          finalColorArray[index] = 3;
          
          colorTestArray[index][3] = 1;
          
          ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
          java.net.URL imgUrl = classLoader.getResource("ColorProblem/" + stateNames[index] + "/" + stateNames[index] + "B.png");
          ImageIcon imgIcon = new ImageIcon(imgUrl);
                              
          newLabel[index].setIcon(imgIcon);
          
        } 
        //If no available values, return to previous node and update it
        else {
          
          return 1;
          
        }
          
        //Print State information
        //System.out.println("Color:  " + finalColorArray[index]);
        
        //Print spacing
        System.out.println("");
        
        //Reset find Pointer
        find = head.next;
        
        
        //For each Queued node, if Queue is not empty, De-Queue and store the value.
        //Recursively call BFS() with the De-queued value.
        //
        //If BFS() returns 1, stay in loop (while)  and update the current node color to the next possible value
        // If no more values are available to the current node, exit the loop and return to the previous node.
        // 
        //If BFS() returns 0, exit and return 0
        if (que.Peek() == null) { 
          
          return 0;
          
        } else {
          
          Integer temp = que.DeQ();
          
          while (temp != null) {
            
            error = BFS( temp );
            
            
            if  (error == 0) { 
              
              temp = null;
              
            } else {
              
              if ( finalColorArray[index] == 0) {
                finalColorArray[index] = 1;
                
                colorTestArray[index][1] = 1;
                
          ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
          java.net.URL imgUrl = classLoader.getResource("ColorProblem/" + stateNames[index] + "/" + stateNames[index] + "Y.png");
          ImageIcon imgIcon = new ImageIcon(imgUrl);
                              
                newLabel[index].setIcon(imgIcon);
                
              } else if ( finalColorArray[index] == 1) {
                finalColorArray[index] = 2;
                
                colorTestArray[index][2] = 1;
                
          ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
          java.net.URL imgUrl = classLoader.getResource("ColorProblem/" + stateNames[index] + "/" + stateNames[index] + "G.png");
          ImageIcon imgIcon = new ImageIcon(imgUrl);
                              
                newLabel[index].setIcon(imgIcon);
                
              } else if ( finalColorArray[index] == 2) {
                finalColorArray[index] = 3;
                
                colorTestArray[index][3] = 1;
                
          ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
          java.net.URL imgUrl = classLoader.getResource("ColorProblem/" + stateNames[index] + "/" + stateNames[index] + "B.png");
          ImageIcon imgIcon = new ImageIcon(imgUrl);
                              
                newLabel[index].setIcon(imgIcon);
                
              } else if ( finalColorArray[index] == 3) {
                finalColorArray[index] = 0;
                
                colorTestArray[index][0] = 1;
                
          ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
          java.net.URL imgUrl = classLoader.getResource("ColorProblem/" + stateNames[index] + "/" + stateNames[index] + "R.png");
          ImageIcon imgIcon = new ImageIcon(imgUrl);
                              
                newLabel[index].setIcon(imgIcon);
                
              }
              
              //Exit condition if all colors are used and still needs to update.
              if(colorTestArray[index][0] != null && colorTestArray[index][1] != null && colorTestArray[index][2] != null && colorTestArray[index][3] != null && colorTestArray[index].equals(0)) {
                
                colorTestArray[index][0] = null;
                colorTestArray[index][1] = null;
                colorTestArray[index][2] = null;
                colorTestArray[index][3] = null;
                
                finalColorArray[index] = null;
                
          ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
          java.net.URL imgUrl = classLoader.getResource("ColorProblem/" + stateNames[index] + "/" + stateNames[index] + ".png");
          ImageIcon imgIcon = new ImageIcon(imgUrl);
                              
                newLabel[index].setIcon(imgIcon);
                
                que.EnQ(temp);
                
                
                return 1;
              }
            }
            
          }
        }
        
      }
      return 0;
    }

    
    
    
    /**
    * Clear - Sets Final Color and Color Test arrays to null
    * 
    * @Param: NONE
    **/
    public static void Clear() throws IOException {
        
        //JPanel p = new JPanel();
      JLabel[] newLabel = {
          Maine, 
          NewHampshire, 
          Vermont, 
          Massachusetts, 
          RhodeIsland, 
          Connecticut, 
          NewYork, 
          NewJersey, 
          Pennsylvania, 
          Delaware, 
          Maryland, 
          WestVirginia, 
          Virginia, 
          NorthCarolina, 
          SouthCarolina, 
          Georgia, 
          Florida, 
          Alabama, 
          Mississippi, 
          Tennessee, 
          Kentucky, 
          Ohio, 
          Indiana, 
          Michigan, 
          Wisconsin, 
          Illinois, 
          Minnesota, 
          Iowa, 
          Missouri, 
          Arkansas, 
          Louisiana, 
          Texas, 
          Oklahoma, 
          Kansas, 
          Nebraska, 
          SouthDakota, 
          NorthDakota, 
          Montana, 
          Wyoming, 
          Colorado, 
          NewMexico, 
          Arizona, 
          Utah, 
          Idaho, 
          Washington, 
          Oregon, 
          Nevada, 
          California };
      
        
      //Set all to null
      finalColorArray = new Integer[stateNames.length];
      
      for (int z = 0; z < finalColorArray.length; z++) {
        finalColorArray[z] = null;
      }
    
    
      //Set all to null
      colorTestArray = new Integer[stateNames.length][4];
      
      for (int z =0; z < finalColorArray.length; z++) {
        colorTestArray[z][0] = null;
        colorTestArray[z][1] = null;
        colorTestArray[z][2] = null;
        colorTestArray[z][3] = null;
        
        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
        java.net.URL imgUrl = classLoader.getResource("ColorProblem/" + stateNames[z] + "/" + stateNames[z] + ".png");
        
        //System.out.println(imgUrl);
        
        ImageIcon imgIcon = new ImageIcon(imgUrl);
                              
        newLabel[z].setIcon(imgIcon);
      }
      
       visit = new int[stateNames.length];
      for (int x = 0; x < stateNames.length; x++) {
        visit[x] = 0;
      }
    }
    
    
  }
  
 
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) 
        throws InterruptedException{
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
        
    //System.out.println("Hello.  Enter the file location:");
    
    //Scanner keyIn = new Scanner(System.in);
    
    //String fileLoc = keyIn.nextLine();
    
    String fileLoc = "ColorProblem/Map/MapFile.txt";
    try {
        

        Graph.BuildGraph(fileLoc);

        Graph.Clear();

        //By changing the integer of DFS, you can set the initial STATE that the Search starts at.
        Graph.DFS(0);

        System.out.println("");
        System.out.println("Depth First Search:");

        for (int q = 0; q < Graph.stateNames.length; q++) {

          System.out.print(Graph.stateNames[q] + ": ");

          if (Graph.finalColorArray[q] == 0) {
            System.out.println("Red");
          } else if (Graph.finalColorArray[q] == 1) {
            System.out.println("Yellow");
          } else if (Graph.finalColorArray[q] == 2) {
            System.out.println("Blue");
          } else if (Graph.finalColorArray[q] == 3) {
            System.out.println("Green");
          } 

        }

        System.out.println("");

        Thread.sleep(5000);

        Graph.Clear();


        // ---- TEST CODE -----
        //    Queue newQ = new Queue();
        //    
        //    newQ.EnQ(2);
        //    newQ.EnQ(5);
        //    newQ.EnQ(1);
        //    newQ.EnQ(7);
        //    
        //    System.out.println(newQ.DeQ());
        //    System.out.println(newQ.Peek());
        //    System.out.println(newQ.DeQ());
        //    System.out.println(newQ.Peek());
        //    System.out.println(newQ.DeQ());
        //    System.out.println(newQ.Peek());
        //    System.out.println(newQ.DeQ());
        //    System.out.println(newQ.Peek());

        //By changing the integer of BFS, you can set the initial STATE that the Search starts at.
        //When both are the Same, we can see different outcomes.
        Graph.BFS(0);

        System.out.println("");
        System.out.println("Breadth First Search:");

        for (int q = 0; q < Graph.stateNames.length; q++) {

          System.out.print(Graph.stateNames[q] + ": ");

          if (Graph.finalColorArray[q] == 0) {
            System.out.println("Red");
          } else if (Graph.finalColorArray[q] == 1) {
            System.out.println("Yellow");
          } else if (Graph.finalColorArray[q] == 2) {
            System.out.println("Blue");
          } else if (Graph.finalColorArray[q] == 3) {
            System.out.println("Green");
          } 

        }
    
    } catch (Exception e) {
          
    }
    
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JLabel Alabama;
    public static javax.swing.JLabel Arizona;
    public static javax.swing.JLabel Arkansas;
    public static javax.swing.JLabel California;
    public static javax.swing.JLabel Colorado;
    public static javax.swing.JLabel Connecticut;
    public static javax.swing.JLabel Delaware;
    public static javax.swing.JLabel Florida;
    public static javax.swing.JLabel Georgia;
    public static javax.swing.JLabel Idaho;
    public static javax.swing.JLabel Illinois;
    public static javax.swing.JLabel Indiana;
    public static javax.swing.JLabel Iowa;
    public static javax.swing.JLabel Kansas;
    public static javax.swing.JLabel Kentucky;
    public static javax.swing.JLabel Louisiana;
    public static javax.swing.JLabel Maine;
    public static javax.swing.JLabel Maryland;
    public static javax.swing.JLabel Massachusetts;
    public static javax.swing.JLabel Michigan;
    public static javax.swing.JLabel Minnesota;
    public static javax.swing.JLabel Mississippi;
    public static javax.swing.JLabel Missouri;
    public static javax.swing.JLabel Montana;
    public static javax.swing.JLabel Nebraska;
    public static javax.swing.JLabel Nevada;
    public static javax.swing.JLabel NewHampshire;
    public static javax.swing.JLabel NewJersey;
    public static javax.swing.JLabel NewMexico;
    public static javax.swing.JLabel NewYork;
    public static javax.swing.JLabel NorthCarolina;
    public static javax.swing.JLabel NorthDakota;
    public static javax.swing.JLabel Ohio;
    public static javax.swing.JLabel Oklahoma;
    public static javax.swing.JLabel Oregon;
    public static javax.swing.JLabel Pennsylvania;
    public static javax.swing.JLabel RhodeIsland;
    public static javax.swing.JLabel SouthCarolina;
    public static javax.swing.JLabel SouthDakota;
    public static javax.swing.JLabel Tennessee;
    public static javax.swing.JLabel Texas;
    public static javax.swing.JLabel Utah;
    public static javax.swing.JLabel Vermont;
    public static javax.swing.JLabel Virginia;
    public static javax.swing.JLabel Washington;
    public static javax.swing.JLabel WestVirginia;
    public static javax.swing.JLabel Wisconsin;
    public static javax.swing.JLabel Wyoming;
    public static javax.swing.JPanel p;
    // End of variables declaration//GEN-END:variables
}
